#:kivy 2.1.0

# MainWidget:
# FredLayout:
EuroPiLayout:
# CanvasExample:

<MainWidget>:
    Button:
        text: "Hello World"
        size: '100dp', '400dp'
        pos: '100dp', '100dp'
    BoxLayout:
        orientation: 'vertical'
        Label:
            text: 'Hello World'
        Label:
            text: 'Hello World'
        Label:
            text: 'Hello World'

<FredLayout>:
    BoxLayout:
        orientation: 'vertical'
        Button:
            text: 'Hello World'
        Button:
            text: 'Hello World'

#:set s dp(450)

<CanvasExample>:
    canvas:
        Color:
            rgb: 1, 0, 0
        Rectangle:
            # pos: self.pos
            # pos: self.center
            pos: self.center_x - s/2, self.center_y - s/2
            # size: self.size
            size: s, s/2

<CanvasExample2>:
    canvas:
        Color:
            # rgb: 0, 1, 0 # green
            rgb: 1, 1, 1 # white
        Rectangle:
            # pos: self.pos
            # pos: self.center
            # pos: self.center_x - s/2, self.center_y - s/2
            # size: self.size
            # size: s, s/2

            pos: self.pos
            size: self.size

            # pos: self.center[0]-500/2, self.center[1]
            # size: [500, 45]

#:set leds dp(20)
<CanvasLed>:
    canvas:
        Color:
            rgb: 1, 0, 0
        Ellipse:
            # pos: self.pos
            pos: self.center_x, self.center_y - leds/2
            size: leds, leds

<CanvasCvIn>:
    canvas:
        Color:
            rgb: 0, 0, 1
        Ellipse:
            # pos: self.pos
            pos: self.center_x, self.center_y - leds/2
            size: leds, leds

# https://kivycoder.com/rounded-buttons-with-kivy-python-kivy-gui-tutorial-22/
# <RoundedButton@Button>:
#     background_normal: ''
#     background_color: (0,0,0,0)
#     canvas.before:
#         Color:
#             rgba: (48/255), (84/255), (150/255), 1
#         RoundedRectangle:
#             pos: self.pos
#             size: self.size
#             radius: [58,]

<RoundedButton@Button>:
    #Prevents the disabled button text from disappearing​    
    background_disabled_normal:''
    #disabled_color: 1,1,1,1
    background_color: 0,0,0,0 # the last zero is the critical on, make invisible​    
    canvas.before:
        Color:
            rgba: (0.4, 0.4, 0.4, 1) #if self.state=='normal' else (0, 0.7, 0.7, 1) # visual feedback of press
        RoundedRectangle:
            pos: self.pos
            size: self.size
            radius: [58,]

<EuroPiLayout>:
    canvas.before:
        Color:
            rgb: .14, .14, .14
        Rectangle:
            pos: self.pos
            size: self.size
    BoxLayout:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            # CheckBox:
            #     text: 'Hello World'
            #     active: True
            # CheckBox:
            #     text: 'Hello World'
            #     active: True
            CanvasCvIn:
            CanvasCvIn:
        BoxLayout:
            padding: '130dp', '0dp'
            CanvasExample2:
		# Widget:
		# 	canvas:
		# 		Color:
		# 			rgb: (255, 0, 255)
		# 		Rectangle:
		# 			pos: self.pos
		# 			size: self.size        
        BoxLayout:
            orientation: 'horizontal'
            padding: '30dp', '20dp'
            spacing: '20dp'
            Slider:
                min: 0
                max: 100
                value: 50
                on_value: root.on_slider_value(self)
            Slider:
                min: 0
                max: 100
                value: 50
                on_value: root.on_slider_value(self)
        BoxLayout:
            padding: '30dp', '20dp'
            spacing: '20dp'
            orientation: 'horizontal'
            # Button:
            #     # text: 'b1'
            #     text: str(self.size)
            # Button:
            #     text: 'b2'
            RoundedButton:
                text: 'b1'
                # pos_hint: {'center_x': .5, 'center_y': .5}
                # on_press: print('b1 pressed')
                # on_press:
                #     # label.text = 'The button was pressed'
                #     print('The button was pressed')
                # on_release:
                #     # label.text = 'The button was released'
                #     print('The button was released\\n')

            RoundedButton:
                text: 'b2'
                # on_press: print('b2 pressed')
        # Grid 3 columns 2 rows of buttons
        GridLayout:
            cols: 3
            rows: 2
            CanvasLed:
            CanvasLed:
            CanvasLed:
            CanvasLed:
            CanvasLed:
            CanvasLed:
        # Debug Area
        # Label:
        #     text: 'Debug Area'
        #     size_hint_y: None
        #     height: '50dp'
        # # multiline text area
        # TextInput:
        #     text: 'Hello World'
        #     size_hint_y: None
        #     height: '100dp'
        BoxLayout:
            orientation: 'horizontal'
            padding: '30dp', '20dp'
            spacing: '20dp'
            Button:
                text: 'Exit'
            Button:
                text: 'test1'
            Button:
                text: 'test2'
                on_press:
                    # label.text = 'The button was pressed'
                    print('The button was pressed')
                on_release:
                    # label.text = 'The button was released'
                    print('The button was released')
